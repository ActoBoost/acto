root.spec.override.statefulSet.spec.volumeClaimTemplates,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:173:53,"			volumeClaimTemplatesOverride := stsOverride.Spec.VolumeClaimTemplates"
root.spec.override.statefulSet.spec.volumeClaimTemplates,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:164:26,"	if len(stsOverride.Spec.VolumeClaimTemplates) != 0 {"
root.spec.override.statefulSet.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1035:53,"func copyLabelsAnnotations(base *metav1.ObjectMeta, override rabbitmqv1beta1.EmbeddedLabelsAnnotations) {"
root.spec.override.statefulSet.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:148:42,"		copyLabelsAnnotations(&sts.ObjectMeta, *stsOverride.EmbeddedLabelsAnnotations)"
root.spec.override.statefulSet.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:147:17,"	if stsOverride.EmbeddedLabelsAnnotations != nil {"
root.spec.override.statefulSet.spec.template.spec.containers.INDEX.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1076:16,"		if container.Name == ""rabbitmq"" {"
root.spec.override.statefulSet.spec.replicas,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:155:12,"		sts.Spec.Replicas = stsOverride.Spec.Replicas"
root.spec.override.statefulSet.spec.replicas,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:154:22,"	if stsOverride.Spec.Replicas != nil {"
root.spec.override.statefulSet.spec.replicas,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:155:40,"		sts.Spec.Replicas = stsOverride.Spec.Replicas"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1049:8,"		base.Name = override.Name"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1048:14,"	if override.Name != """" {"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1049:24,"		base.Name = override.Name"
root.spec.override.statefulSet.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1040:14,"	if override.Annotations != nil {"
root.spec.override.statefulSet.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1041:58,"		base.Annotations = mergeMap(base.Annotations, override.Annotations)"
root.spec.resources,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:564:17,"					Resources: *builder.Instance.Spec.Resources,"
root.spec.resources,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:400:22,"	return cluster.Spec.Resources != nil && cluster.Spec.Resources.Limits != nil && !cluster.Spec.Resources.Limits.Memory().IsZero()"
root.spec.image,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:717:24,"		Image: instance.Spec.Image,"
root.spec.image,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:565:39,"					Image:     builder.Instance.Spec.Image,"
root.spec.image,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_operator_defaults.go:18:24,"		rabbitmqCluster.Spec.Image = r.DefaultRabbitmqImage"
root.spec.image,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_operator_defaults.go:17:26,"	if rabbitmqCluster.Spec.Image == """" {"
root.spec.override.statefulSet.spec,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:151:17,"	if stsOverride.Spec == nil {"
root.spec.override.statefulSet.spec,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:77:39,"	if overrideSts != nil && overrideSts.Spec != nil {"
root.spec.secretBackend.vault.tls.altNames,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:826:16,"		if vault.TLS.AltNames != """" {"
root.spec.override.statefulSet.spec.template.spec.containers.INDEX.env,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:270:18,"	if rmqContainer.Env != nil {"
root.spec.override.statefulSet.spec.podManagementPolicy,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:161:12,"		sts.Spec.PodManagementPolicy = stsOverride.Spec.PodManagementPolicy"
root.spec.override.statefulSet.spec.podManagementPolicy,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:160:22,"	if stsOverride.Spec.PodManagementPolicy != """" {"
root.spec.override.statefulSet.spec.podManagementPolicy,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:161:51,"		sts.Spec.PodManagementPolicy = stsOverride.Spec.PodManagementPolicy"
root.spec.override.service,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:71:70,"		if err := applySvcOverride(service, builder.Instance.Spec.Override.Service); err != nil {"
root.spec.override.service,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:70:36,"	if builder.Instance.Spec.Override.Service != nil {"
root.spec.persistence.storage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:207:31,"	if instance.Spec.Persistence.Storage.Cmp(zero) == 0 {"
root.spec.persistence.storage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:116:101,"	updatePersistenceStorageCapacity(&sts.Spec.VolumeClaimTemplates, builder.Instance.Spec.Persistence.Storage)"
root.spec.persistence.storage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:169:32,"		if instance.Spec.Persistence.Storage.Cmp(k8sresource.MustParse(""0Gi"")) == 0 {"
root.spec.persistence.storage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:431:39,"	if builder.Instance.Spec.Persistence.Storage.Cmp(zero) == 0 {"
root.spec.persistence.storage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:141:56,"			t.Spec.Resources.Requests[corev1.ResourceStorage] = *capacity"
root.spec.persistence.storage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:221:30,"					corev1.ResourceStorage: *instance.Spec.Persistence.Storage,"
root.spec.override.statefulSet.spec.template.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1057:58,"		base.Annotations = mergeMap(base.Annotations, override.Annotations)"
root.spec.override.statefulSet.spec.template.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1056:14,"	if override.Annotations != nil {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:182:46,"			if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:135:46,"			if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:105:45,"		if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:118:44,"	if builder.Instance.DisableNonTLSListeners() == false {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:145:46,"			if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:408:26,"	return cluster.Spec.TLS.DisableNonTLSListeners"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:337:44,"	if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:125:46,"			if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:864:44,"	if builder.Instance.DisableNonTLSListeners() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_tls.go:21:43,"	if rabbitmqCluster.DisableNonTLSListeners() && !rabbitmqCluster.TLSEnabled() {"
root.spec.tls.disableNonTLSListeners,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:201:46,"			if builder.Instance.DisableNonTLSListeners() {"
root.spec.tolerations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:558:57,"			Tolerations:                   builder.Instance.Spec.Tolerations,"
root.spec.rabbitmq.advancedConfig,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:239:66,"	updateProperty(configMap.Data, ""advanced.config"", rmqProperties.AdvancedConfig)"
root.spec.rabbitmq.advancedConfig,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:420:36,"	if builder.Instance.Spec.Rabbitmq.AdvancedConfig != """" || builder.Instance.Spec.Rabbitmq.EnvConfig != """" {"
root.spec.rabbitmq.advancedConfig,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:481:36,"	if builder.Instance.Spec.Rabbitmq.AdvancedConfig != """" {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:957:15,"			if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:416:14,"	if !builder.Instance.VaultDefaultUserSecretEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_rabbitmq_configurations.go:94:33,"	sts, err := r.statefulSet(ctx, rmq)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1017:13,"	if builder.Instance.MutualTLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:628:41,"			defaultUserCredentialUpdater(builder.Instance))"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:488:13,"	if builder.Instance.SecretTLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:216:14,"		if builder.Instance.StreamNeeded() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:201:15,"			if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:248:13,"	if builder.Instance.MutualTLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_finalizer.go:72:36,"		if err := r.removeFinalizer(ctx, rabbitmqCluster); err != nil {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_rabbitmq_configurations.go:82:38,"	serverConf, err := r.configMap(ctx, rmq, rmq.ChildResourceName(resource.ServerConfigMapName))"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:169:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:115:64,"	return p.Client.AppsV1().StatefulSets(rmq.Namespace).Get(ctx, rmq.ChildResourceName(""server""), metav1.GetOptions{})"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:170:61,"func (p PersistenceScaler) scaleUpPVCs(ctx context.Context, rmq rabbitmqv1beta1.RabbitmqCluster, pvcs []*corev1.PersistentVolumeClaim, desiredCapacity k8sresource.Quantity) error {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_finalizer.go:41:77,"func (r *RabbitmqClusterReconciler) prepareForDeletion(ctx context.Context, rabbitmqCluster *rabbitmqv1beta1.RabbitmqCluster) error {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_finalizer.go:44:38,"			uid, err := r.statefulSetUID(ctx, rabbitmqCluster)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:188:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:207:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:905:13,"	if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:942:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:949:14,"		if builder.Instance.StreamNeeded() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:887:13,"	if builder.Instance.AdditionalPluginEnabled(""rabbitmq_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:172:14,"		if builder.Instance.StreamNeeded() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:118:13,"	if builder.Instance.DisableNonTLSListeners() == false {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1025:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:135:15,"			if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:956:14,"		if builder.Instance.MutualTLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:118:66,"func (p PersistenceScaler) existingCapacity(ctx context.Context, rmq rabbitmqv1beta1.RabbitmqCluster) (k8sresource.Quantity, error) {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:83:80,"		pvc, err := p.Client.CoreV1().PersistentVolumeClaims(rmq.Namespace).Get(ctx, rmq.PVCName(int(i)), metav1.GetOptions{})"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:67:29,"	if err := p.deleteSts(ctx, rmq); err != nil {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:56:45,"	existingPVCs, err := p.getClusterPVCs(ctx, rmq)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:198:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:125:15,"			if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:337:13,"	if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:249:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:183:13,"	if builder.Instance.TLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:145:15,"			if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:73:28,"	return p.scaleUpPVCs(ctx, rmq, pvcsToBeScaled, desiredCapacity)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:935:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:457:7,func (cluster RabbitmqCluster) ChildResourceName(name string) string {
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:105:14,"		if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1018:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_finalizer.go:55:46,"			if err := r.addRabbitmqDeletionLabel(ctx, rabbitmqCluster); err != nil {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_persistence.go:18:62,"	err := scaling.NewPersistenceScaler(r.Clientset).Scale(ctx, *rmq, desiredCapacity)"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:136:77,"	logger.Info(""deleting statefulSet (pods won't be deleted)"", ""statefulSet"", rmq.ChildResourceName(""server""))"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:893:13,"	if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:101:13,"	if builder.Instance.TLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:461:7,func (cluster RabbitmqCluster) PVCName(i int) string {
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:559:77,"			InitContainers:                []corev1.Container{setupContainer(builder.Instance)},"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:333:81,"		defaultPodAnnotations = appendVaultAnnotations(defaultPodAnnotations, builder.Instance)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:144:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_rabbitmq_configurations.go:81:105,"func (r *RabbitmqClusterReconciler) restartStatefulSetIfNeeded(ctx context.Context, logger logr.Logger, rmq *rabbitmqv1beta1.RabbitmqCluster) (time.Duration, error) {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:899:13,"	if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:131:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:153:13,"	if builder.Instance.MutualTLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:919:13,"	if builder.Instance.TLSEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:162:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:516:14,"		if builder.Instance.MutualTLSEnabled() && !builder.Instance.SingleTLSSecret() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:469:14,"	if !builder.Instance.VaultDefaultUserSecretEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:76:64,"func (p PersistenceScaler) getClusterPVCs(ctx context.Context, rmq rabbitmqv1beta1.RabbitmqCluster) ([]*corev1.PersistentVolumeClaim, error) {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:209:13,"	if builder.Instance.MemoryLimited() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:121:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:134:59,"func (p PersistenceScaler) deleteSts(ctx context.Context, rmq rabbitmqv1beta1.RabbitmqCluster) error {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:53:44,"	pvc, err := persistentVolumeClaim(builder.Instance, builder.Scheme)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:141:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stream"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:159:71,"		_, getErr := p.Client.AppsV1().StatefulSets(rmq.Namespace).Get(ctx, rmq.ChildResourceName(""server""), metav1.GetOptions{})"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:258:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:624:13,"	if builder.Instance.VaultDefaultUserSecretEnabled() &&"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:417:60,"		appendDefaultUserSecretVolumeProjection(volumes, builder.Instance)"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:32:55,"func (p PersistenceScaler) Scale(ctx context.Context, rmq rabbitmqv1beta1.RabbitmqCluster, desiredCapacity k8sresource.Quantity) error {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:566:44,"					Env: append(envVarsK8sObjects(builder.Instance),"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1010:13,"	if builder.Instance.StreamNeeded() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:964:15,"			if builder.Instance.AdditionalPluginEnabled(""rabbitmq_web_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:119:28,"	sts, err := p.getSts(ctx, rmq)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:127:38,"		if err := applyStsOverride(builder.Instance, builder.Scheme, sts, builder.Instance.Spec.Override.StatefulSet); err != nil {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:182:15,"			if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/rabbitmq_resource_builder.go:43:13,"	if builder.Instance.VaultDefaultUserSecretEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/default_user_secret.go:73:40,"			""host"":              []byte(builder.Instance.ServiceSubDomain()),"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:516:54,"		if builder.Instance.MutualTLSEnabled() && !builder.Instance.SingleTLSSecret() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1003:13,"	if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:135:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:35:51,"	existingCapacity, err := p.existingCapacity(ctx, rmq)"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:864:13,"	if builder.Instance.DisableNonTLSListeners() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:153:14,"		if builder.Instance.AdditionalPluginEnabled(""rabbitmq_stomp"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:332:13,"	if builder.Instance.VaultEnabled() {"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:912:13,"	if builder.Instance.StreamNeeded() {"
root,/home/tyler/acto-ops/cluster-operator/controllers/rabbitmqcluster_controller.go:246:61,"	rabbitmqClusterInstance := &rabbitmqv1beta1.RabbitmqCluster{}"
root,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:996:13,"	if builder.Instance.AdditionalPluginEnabled(""rabbitmq_mqtt"") {"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:138:28,"	sts, err := p.getSts(ctx, rmq)"
root,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:114:56,"func (p PersistenceScaler) getSts(ctx context.Context, rmq rabbitmqv1beta1.RabbitmqCluster) (*appsv1.StatefulSet, error) {"
root.spec.override.service.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1037:48,"		base.Labels = mergeMap(base.Labels, override.Labels)"
root.spec.override.service.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1036:14,"	if override.Labels != nil {"
root.spec.secretBackend.vault.tls.pkiIssuerPath,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:146:18,"	return spec.TLS.PKIIssuerPath != """""
root.spec.secretBackend.vault.tls.pkiIssuerPath,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:819:25,"		pathCert := vault.TLS.PKIIssuerPath"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.spec,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:178:59,"				pvcOverride[i].Spec = volumeClaimTemplatesOverride[i].Spec"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.spec,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:178:20,"				pvcOverride[i].Spec = volumeClaimTemplatesOverride[i].Spec"
root.spec.rabbitmq.additionalPlugins,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:412:42,"	for _, p := range cluster.Spec.Rabbitmq.AdditionalPlugins {"
root.spec.rabbitmq.additionalPlugins,/home/tyler/acto-ops/cluster-operator/internal/resource/rabbitmq_plugins.go:57:92,"	configMap.Data[""enabled_plugins""] = desiredPluginsAsString(builder.Instance.Spec.Rabbitmq.AdditionalPlugins)"
root.spec.rabbitmq.additionalPlugins,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_cli.go:89:59,"	plugins := resource.NewRabbitmqPlugins(rmq.Spec.Rabbitmq.AdditionalPlugins)"
root.spec.rabbitmq.additionalPlugins,/home/tyler/acto-ops/cluster-operator/internal/resource/default_user_secret.go:161:55,"	for _, value := range builder.Instance.Spec.Rabbitmq.AdditionalPlugins {"
root.spec.persistence.storageClassName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:225:48,"			StorageClassName: instance.Spec.Persistence.StorageClassName,"
root.spec.override.statefulSet.spec.template.spec,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:194:31,"	if stsOverride.Spec.Template.Spec != nil {"
root.spec.override.statefulSet.spec.template.spec,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:195:90,"		patchedPodSpec, err := patchPodSpec(&sts.Spec.Template.Spec, stsOverride.Spec.Template.Spec)"
root.spec.service.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:293:176,"		service.Annotations = metadata.ReconcileAnnotations(metadata.ReconcileAndFilterAnnotations(service.Annotations, builder.Instance.Annotations), builder.Instance.Spec.Service.Annotations)"
root.spec.service.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:292:35,"	if builder.Instance.Spec.Service.Annotations != nil {"
root.spec.affinity,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:557:57,"			Affinity:                      builder.Instance.Spec.Affinity,"
root.spec.replicas,/home/tyler/acto-ops/cluster-operator/internal/scaling/scaling.go:82:45,"	for i = 0; i < pointer.Int32Deref(rmq.Spec.Replicas, 1); i++ {"
root.spec.replicas,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:850:55,"	for i = 0; i < pointer.Int32PtrDerefOr(instance.Spec.Replicas, 1); i++ {"
root.spec.replicas,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_cli.go:122:3,"		*rmq.Spec.Replicas > 1"
root.spec.replicas,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_cli.go:90:25,"	for i := int32(0); i < *rmq.Spec.Replicas; i++ {"
root.spec.replicas,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:99:44,"	sts.Spec.Replicas = builder.Instance.Spec.Replicas"
root.spec.override.statefulSet.spec.template.spec.containers.INDEX,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1077:11,"			return container"
root.spec.override.statefulSet.spec.template.spec.containers.INDEX,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1075:9,"	for _, container := range containers {"
root.spec.override.statefulSet.spec.template.spec.containers.INDEX,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:267:2,"	rmqContainer := containerRabbitmq(podSpecOverride.Containers)"
root.spec.imagePullSecrets,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:553:57,"			ImagePullSecrets:              builder.Instance.Spec.ImagePullSecrets,"
root.spec.imagePullSecrets,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_operator_defaults.go:29:26,"				rabbitmqCluster.Spec.ImagePullSecrets = append(rabbitmqCluster.Spec.ImagePullSecrets, corev1.LocalObjectReference{Name: reference})"
root.spec.imagePullSecrets,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_operator_defaults.go:24:26,"	if rabbitmqCluster.Spec.ImagePullSecrets == nil {"
root.spec.imagePullSecrets,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_operator_defaults.go:29:73,"				rabbitmqCluster.Spec.ImagePullSecrets = append(rabbitmqCluster.Spec.ImagePullSecrets, corev1.LocalObjectReference{Name: reference})"
root.spec.override.statefulSet.spec.template.spec.securityContext,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:282:21,"	if podSpecOverride.SecurityContext != nil && reflect.DeepEqual(*podSpecOverride.SecurityContext, corev1.PodSecurityContext{}) {"
root.spec.override.statefulSet.spec.template.spec.initContainers.INDEX.securityContext,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:286:40,"		if podSpecOverride.InitContainers[i].SecurityContext != nil && reflect.DeepEqual(*podSpecOverride.InitContainers[i].SecurityContext, corev1.SecurityContext{}) {"
root.spec.override.statefulSet.spec.selector,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:79:41,"			sts.Spec.Selector = overrideSts.Spec.Selector"
root.spec.override.statefulSet.spec.selector,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:78:23,"		if overrideSts.Spec.Selector != nil {"
root.spec.override.statefulSet.spec.selector,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:79:13,"			sts.Spec.Selector = overrideSts.Spec.Selector"
root.spec.service.type,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:64:35,"	if builder.Instance.Spec.Service.Type == ""ClusterIP"" || builder.Instance.Spec.Service.Type == """" {"
root.spec.service.type,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:64:88,"	if builder.Instance.Spec.Service.Type == ""ClusterIP"" || builder.Instance.Spec.Service.Type == """" {"
root.spec.service.type,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:59:52,"	service.Spec.Type = builder.Instance.Spec.Service.Type"
root.spec.rabbitmq,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:228:2,"	rmqProperties := builder.Instance.Spec.Rabbitmq"
root.spec.terminationGracePeriodSeconds,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:554:57,"			TerminationGracePeriodSeconds: builder.Instance.Spec.TerminationGracePeriodSeconds,"
root.spec.override.statefulSet.spec.updateStrategy,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:158:12,"		sts.Spec.UpdateStrategy = *stsOverride.Spec.UpdateStrategy"
root.spec.override.statefulSet.spec.updateStrategy,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:158:29,"		sts.Spec.UpdateStrategy = *stsOverride.Spec.UpdateStrategy"
root.spec.override.statefulSet.spec.updateStrategy,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:157:22,"	if stsOverride.Spec.UpdateStrategy != nil {"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:176:80,"				copyObjectMeta(&pvcOverride[i].ObjectMeta, volumeClaimTemplatesOverride[i].EmbeddedObjectMeta)"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1047:46,"func copyObjectMeta(base *metav1.ObjectMeta, override rabbitmqv1beta1.EmbeddedObjectMeta) {"
root.spec.secretBackend.vault.role,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:803:49,"		""vault.hashicorp.com/role"":             vault.Role,"
root.spec.override.statefulSet,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:126:36,"	if builder.Instance.Spec.Override.StatefulSet != nil {"
root.spec.override.statefulSet,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:127:100,"		if err := applyStsOverride(builder.Instance, builder.Scheme, sts, builder.Instance.Spec.Override.StatefulSet); err != nil {"
root.spec.override.statefulSet,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:76:48,"	overrideSts := builder.Instance.Spec.Override.StatefulSet"
root.spec.override.statefulSet.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1037:48,"		base.Labels = mergeMap(base.Labels, override.Labels)"
root.spec.override.statefulSet.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1036:14,"	if override.Labels != nil {"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1052:14,"	if override.Labels != nil {"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1053:48,"		base.Labels = mergeMap(base.Labels, override.Labels)"
root.spec.tls.caSecretName,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:396:57,"	return (cluster.SecretTLSEnabled() && cluster.Spec.TLS.CaSecretName != """") || cluster.VaultTLSEnabled()"
root.spec.tls.caSecretName,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_tls.go:63:43,"			secretName := rabbitmqCluster.Spec.TLS.CaSecretName"
root.spec.tls.caSecretName,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:404:56,"	return cluster.MutualTLSEnabled() && cluster.Spec.TLS.CaSecretName == cluster.Spec.TLS.SecretName"
root.spec.tls.caSecretName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:519:70,"					LocalObjectReference: corev1.LocalObjectReference{Name: tlsSpec.CaSecretName},"
root.spec.override.statefulSet.spec.template.spec.containers.INDEX.volumeMounts,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:275:18,"	if rmqContainer.VolumeMounts != nil {"
root.spec.override.statefulSet.spec.template.spec.containers,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:267:52,"	rmqContainer := containerRabbitmq(podSpecOverride.Containers)"
root.spec.secretBackend.vault.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:844:83,"	return metadata.ReconcileAnnotations(currentAnnotations, vaultAnnotations, vault.Annotations)"
root.spec.secretBackend.vault,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:798:39,"	vault := instance.Spec.SecretBackend.Vault"
root.spec.secretBackend.vault,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:438:62,"	return cluster.VaultEnabled() && cluster.Spec.SecretBackend.Vault.TLSEnabled()"
root.spec.secretBackend.vault,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:426:36,"	return cluster.Spec.SecretBackend.Vault != nil"
root.spec.secretBackend.vault,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:434:62,"	return cluster.VaultEnabled() && cluster.Spec.SecretBackend.Vault.DefaultUserSecretEnabled()"
root.spec.override.statefulSet.spec.template.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1052:14,"	if override.Labels != nil {"
root.spec.override.statefulSet.spec.template.metadata.labels,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1053:48,"		base.Labels = mergeMap(base.Labels, override.Labels)"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1057:58,"		base.Annotations = mergeMap(base.Annotations, override.Annotations)"
root.spec.override.statefulSet.spec.volumeClaimTemplates.INDEX.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1056:14,"	if override.Annotations != nil {"
root.spec.secretBackend.vault.tls.commonName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:821:16,"		if vault.TLS.CommonName != """" {"
root.spec.secretBackend.vault.tls.commonName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:820:3,"		commonName := instance.ServiceSubDomain()"
root.spec.override.statefulSet.spec.template.metadata.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1049:8,"		base.Name = override.Name"
root.spec.override.statefulSet.spec.template.metadata.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1048:14,"	if override.Name != """" {"
root.spec.override.statefulSet.spec.template.metadata.name,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1049:24,"		base.Name = override.Name"
root.spec.override.statefulSet.spec.serviceName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:83:44,"			sts.Spec.ServiceName = overrideSts.Spec.ServiceName"
root.spec.override.statefulSet.spec.serviceName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:82:23,"		if overrideSts.Spec.ServiceName != """" {"
root.spec.override.statefulSet.spec.serviceName,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:83:13,"			sts.Spec.ServiceName = overrideSts.Spec.ServiceName"
root.spec.secretBackend.vault.defaultUserUpdaterImage,/home/tyler/acto-ops/cluster-operator/controllers/reconcile_operator_defaults.go:38:44,"		rabbitmqCluster.Spec.SecretBackend.Vault.DefaultUserUpdaterImage = &r.DefaultUserUpdaterImage"
root.spec.secretBackend.vault.defaultUserUpdaterImage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:626:3,"		*builder.Instance.Spec.SecretBackend.Vault.DefaultUserUpdaterImage != """" {"
root.spec.secretBackend.vault.defaultUserUpdaterImage,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:430:68,"	return cluster.VaultEnabled() && cluster.Spec.SecretBackend.Vault.DefaultUserUpdaterImage == nil"
root.spec.secretBackend.vault.defaultUserUpdaterImage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:625:45,"		builder.Instance.Spec.SecretBackend.Vault.DefaultUserUpdaterImage != nil &&"
root.spec.secretBackend.vault.defaultUserUpdaterImage,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:653:10,"		Image: *instance.Spec.SecretBackend.Vault.DefaultUserUpdaterImage,"
root.spec.rabbitmq.envConfig,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:420:91,"	if builder.Instance.Spec.Rabbitmq.AdvancedConfig != """" || builder.Instance.Spec.Rabbitmq.EnvConfig != """" {"
root.spec.rabbitmq.envConfig,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:475:36,"	if builder.Instance.Spec.Rabbitmq.EnvConfig != """" {"
root.spec.rabbitmq.envConfig,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:240:68,"	updateProperty(configMap.Data, ""rabbitmq-env.conf"", rmqProperties.EnvConfig)"
root.spec.override.service.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1040:14,"	if override.Annotations != nil {"
root.spec.override.service.metadata.annotations,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1041:58,"		base.Annotations = mergeMap(base.Annotations, override.Annotations)"
root.spec.override.service.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:85:42,"		copyLabelsAnnotations(&svc.ObjectMeta, *override.EmbeddedLabelsAnnotations)"
root.spec.override.service.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/service.go:84:14,"	if override.EmbeddedLabelsAnnotations != nil {"
root.spec.override.service.metadata,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:1035:53,"func copyLabelsAnnotations(base *metav1.ObjectMeta, override rabbitmqv1beta1.EmbeddedLabelsAnnotations) {"
root.spec.resources.limits,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:400:106,"	return cluster.Spec.Resources != nil && cluster.Spec.Resources.Limits != nil && !cluster.Spec.Resources.Limits.Memory().IsZero()"
root.spec.resources.limits,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabbitmqcluster_types.go:400:65,"	return cluster.Spec.Resources != nil && cluster.Spec.Resources.Limits != nil && !cluster.Spec.Resources.Limits.Memory().IsZero()"
root.spec.resources.limits,/home/tyler/acto-ops/cluster-operator/internal/resource/configmap.go:210:154,"		if _, err := userConfigurationSection.NewKey(""total_memory_available_override_value"", fmt.Sprintf(""%d"", removeHeadroom(builder.Instance.Spec.Resources.Limits.Memory().Value()))); err != nil {"
root.spec.secretBackend.vault.defaultUserPath,/home/tyler/acto-ops/cluster-operator/internal/resource/statefulset.go:810:83,"		vaultAnnotations[""vault.hashicorp.com/agent-inject-secret-""+secretName] = vault.DefaultUserPath"
root.spec.secretBackend.vault.defaultUserPath,/home/tyler/acto-ops/cluster-operator/api/v1beta1/rabb