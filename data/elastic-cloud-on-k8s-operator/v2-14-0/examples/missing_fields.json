[
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.apiVersion",
    "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.apiVersion",
    "APIVersion defines the versioned schema of this representation of an object.\nServers should convert recognized schemas to the latest internal value, and\nmay reject unrecognized values.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.kind",
    "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.kind",
    "Kind is a string value representing the REST resource this object represents.\nServers may infer this from the endpoint the client submits requests to.\nCannot be updated.\nIn CamelCase.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.annotations",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.annotations",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.annotations.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.annotations.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.finalizers",
    null,
    "array",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.finalizers",
    null,
    "array",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.finalizers.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.finalizers.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.labels",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.labels",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.labels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.labels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.namespace",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.metadata.namespace",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource",
    "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
    "object",
    {
      "apiGroup": {
        "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
        "type": "string"
      },
      "kind": {
        "description": "Kind is the type of resource being referenced",
        "type": "string"
      },
      "name": {
        "description": "Name is the name of resource being referenced",
        "type": "string"
      }
    },
    [
      "kind",
      "name"
    ]
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource",
    "dataSource field can be used to specify either:\n* An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)\n* An existing PVC (PersistentVolumeClaim)\nIf the provisioner or an external controller can support the specified data source,\nit will create a new volume based on the contents of the specified data source.\nWhen the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,\nand dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.\nIf the namespace is specified, then dataSourceRef will not be copied to dataSource.",
    "object",
    {
      "apiGroup": {
        "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
        "type": "string"
      },
      "kind": {
        "description": "Kind is the type of resource being referenced",
        "type": "string"
      },
      "name": {
        "description": "Name is the name of resource being referenced",
        "type": "string"
      }
    },
    [
      "kind",
      "name"
    ]
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource.apiGroup",
    "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource.apiGroup",
    "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource.kind",
    "Kind is the type of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource.kind",
    "Kind is the type of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource.name",
    "Name is the name of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSource.name",
    "Name is the name of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef",
    "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    "object",
    {
      "apiGroup": {
        "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
        "type": "string"
      },
      "kind": {
        "description": "Kind is the type of resource being referenced",
        "type": "string"
      },
      "name": {
        "description": "Name is the name of resource being referenced",
        "type": "string"
      },
      "namespace": {
        "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
        "type": "string"
      }
    },
    [
      "kind",
      "name"
    ]
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef",
    "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty\nvolume is desired. This may be any object from a non-empty API group (non\ncore object) or a PersistentVolumeClaim object.\nWhen this field is specified, volume binding will only succeed if the type of\nthe specified object matches some installed volume populator or dynamic\nprovisioner.\nThis field will replace the functionality of the dataSource field and as such\nif both fields are non-empty, they must have the same value. For backwards\ncompatibility, when namespace isn't specified in dataSourceRef,\nboth fields (dataSource and dataSourceRef) will be set to the same\nvalue automatically if one of them is empty and the other is non-empty.\nWhen namespace is specified in dataSourceRef,\ndataSource isn't set to the same value and must be empty.\nThere are three important differences between dataSource and dataSourceRef:\n* While dataSource only allows two specific types of objects, dataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While dataSource ignores disallowed values (dropping them), dataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n* While dataSource only allows local objects, dataSourceRef allows objects\n  in any namespaces.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.\n(Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    "object",
    {
      "apiGroup": {
        "description": "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
        "type": "string"
      },
      "kind": {
        "description": "Kind is the type of resource being referenced",
        "type": "string"
      },
      "name": {
        "description": "Name is the name of resource being referenced",
        "type": "string"
      },
      "namespace": {
        "description": "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
        "type": "string"
      }
    },
    [
      "kind",
      "name"
    ]
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.apiGroup",
    "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.apiGroup",
    "APIGroup is the group for the resource being referenced.\nIf APIGroup is not specified, the specified Kind must be in the core API group.\nFor any other third-party types, APIGroup is required.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.kind",
    "Kind is the type of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.kind",
    "Kind is the type of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.name",
    "Name is the name of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.name",
    "Name is the name of resource being referenced",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.namespace",
    "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.dataSourceRef.namespace",
    "Namespace is the namespace of resource being referenced\nNote that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n(Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.resources.limits",
    "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.resources.limits",
    "Limits describes the maximum amount of compute resources allowed.\nMore info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.resources.limits.additional_properties",
    null,
    "opaque",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.resources.limits.additional_properties",
    null,
    "opaque",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.resources.requests.additional_properties",
    null,
    "opaque",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.resources.requests.additional_properties",
    null,
    "opaque",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector",
    "selector is a label query over volumes to consider for binding.",
    "object",
    {
      "matchExpressions": {
        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        "items": {
          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
          "properties": {
            "key": {
              "description": "key is the label key that the selector applies to.",
              "type": "string"
            },
            "operator": {
              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
              "type": "string"
            },
            "values": {
              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            }
          },
          "required": [
            "key",
            "operator"
          ],
          "type": "object"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      },
      "matchLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
        "type": "object"
      }
    },
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector",
    "selector is a label query over volumes to consider for binding.",
    "object",
    {
      "matchExpressions": {
        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        "items": {
          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
          "properties": {
            "key": {
              "description": "key is the label key that the selector applies to.",
              "type": "string"
            },
            "operator": {
              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
              "type": "string"
            },
            "values": {
              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            }
          },
          "required": [
            "key",
            "operator"
          ],
          "type": "object"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      },
      "matchLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
        "type": "object"
      }
    },
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions",
    "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    "array",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions",
    "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    "array",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM",
    "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
    "object",
    {
      "key": {
        "description": "key is the label key that the selector applies to.",
        "type": "string"
      },
      "operator": {
        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
        "type": "string"
      },
      "values": {
        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      }
    },
    [
      "key",
      "operator"
    ]
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM",
    "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
    "object",
    {
      "key": {
        "description": "key is the label key that the selector applies to.",
        "type": "string"
      },
      "operator": {
        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
        "type": "string"
      },
      "values": {
        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      }
    },
    [
      "key",
      "operator"
    ]
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.key",
    "key is the label key that the selector applies to.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.key",
    "key is the label key that the selector applies to.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.operator",
    "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.operator",
    "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.values",
    "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
    "array",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.values",
    "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
    "array",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.values.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchExpressions.ITEM.values.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchLabels",
    "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchLabels",
    "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
    "object",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchLabels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.selector.matchLabels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.volumeAttributesClassName",
    "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.volumeAttributesClassName",
    "volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.\nIf specified, the CSI driver will create or update the volume with the attributes defined\nin the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,\nit can be changed after the claim is created. An empty string value means that no VolumeAttributesClass\nwill be applied to the claim but it's not allowed to reset this field to empty string once it is set.\nIf unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass\nwill be set by the persistentvolume controller if it exists.\nIf the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be\nset to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource\nexists.\nMore info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/\n(Alpha) Using this field requires the VolumeAttributesClass feature gate to be enabled.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.volumeMode",
    "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.volumeMode",
    "volumeMode defines what type of volume is required by the claim.\nValue of Filesystem is implied when not included in claim spec.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.volumeName",
    "volumeName is the binding reference to the PersistentVolume backing this claim.",
    "string",
    null,
    null
  ],
  [
    "spec.nodeSets.ITEM.volumeClaimTemplates.ITEM.spec.volumeName",
    "volumeName is the binding reference to the PersistentVolume backing this claim.",
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget",
    "PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster.\nThe default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget`\nto the empty value (`{}` in YAML).",
    "object",
    {
      "metadata": {
        "description": "ObjectMeta is the metadata of the PDB.\nThe name and namespace provided here are managed by ECK and will be ignored.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "finalizers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "spec": {
        "description": "Spec is the specification of the PDB.",
        "properties": {
          "maxUnavailable": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by\n\"selector\" are unavailable after the eviction, i.e. even in absence of\nthe evicted pod. For example, one can prevent all voluntary evictions\nby specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
            "x-kubernetes-int-or-string": true
          },
          "minAvailable": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "description": "An eviction is allowed if at least \"minAvailable\" pods selected by\n\"selector\" will still be available after the eviction, i.e. even in the\nabsence of the evicted pod.  So for example you can prevent all voluntary\nevictions by specifying \"100%\".",
            "x-kubernetes-int-or-string": true
          },
          "selector": {
            "description": "Label query over pods whose evictions are managed by the disruption\nbudget.\nA null selector selects no pods.\nAn empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.\nIn policy/v1, an empty selector will select all pods in the namespace.",
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "required": [
                    "key",
                    "operator"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": "object"
              }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic"
          },
          "unhealthyPodEvictionPolicy": {
            "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods\nshould be considered for eviction. Current implementation considers healthy pods,\nas pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n\nValid policies are IfHealthyBudget and AlwaysAllow.\nIf no policy is specified, the default behavior will be used,\nwhich corresponds to the IfHealthyBudget policy.\n\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"),\nbut not yet healthy can be evicted only if the guarded application is not\ndisrupted (status.currentHealthy is at least equal to status.desiredHealthy).\nHealthy pods will be subject to the PDB for eviction.\n\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"),\nbut not yet healthy are considered disrupted and can be evicted regardless\nof whether the criteria in a PDB is met. This means perspective running\npods of a disrupted application might not get a chance to become healthy.\nHealthy pods will be subject to the PDB for eviction.\n\n\nAdditional policies may be added in the future.\nClients making eviction decisions should disallow eviction of unhealthy pods\nif they encounter an unrecognized policy in this field.\n\n\nThis field is beta-level. The eviction API uses this field when\nthe feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget",
    "PodDisruptionBudget provides access to the default pod disruption budget for the Elasticsearch cluster.\nThe default budget selects all cluster pods and sets `maxUnavailable` to 1. To disable, set `PodDisruptionBudget`\nto the empty value (`{}` in YAML).",
    "object",
    {
      "metadata": {
        "description": "ObjectMeta is the metadata of the PDB.\nThe name and namespace provided here are managed by ECK and will be ignored.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "finalizers": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "namespace": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "spec": {
        "description": "Spec is the specification of the PDB.",
        "properties": {
          "maxUnavailable": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by\n\"selector\" are unavailable after the eviction, i.e. even in absence of\nthe evicted pod. For example, one can prevent all voluntary evictions\nby specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
            "x-kubernetes-int-or-string": true
          },
          "minAvailable": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "string"
              }
            ],
            "description": "An eviction is allowed if at least \"minAvailable\" pods selected by\n\"selector\" will still be available after the eviction, i.e. even in the\nabsence of the evicted pod.  So for example you can prevent all voluntary\nevictions by specifying \"100%\".",
            "x-kubernetes-int-or-string": true
          },
          "selector": {
            "description": "Label query over pods whose evictions are managed by the disruption\nbudget.\nA null selector selects no pods.\nAn empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.\nIn policy/v1, an empty selector will select all pods in the namespace.",
            "properties": {
              "matchExpressions": {
                "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
                "items": {
                  "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
                  "properties": {
                    "key": {
                      "description": "key is the label key that the selector applies to.",
                      "type": "string"
                    },
                    "operator": {
                      "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                      "type": "string"
                    },
                    "values": {
                      "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                      "items": {
                        "type": "string"
                      },
                      "type": "array",
                      "x-kubernetes-list-type": "atomic"
                    }
                  },
                  "required": [
                    "key",
                    "operator"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-type": "atomic"
              },
              "matchLabels": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
                "type": "object"
              }
            },
            "type": "object",
            "x-kubernetes-map-type": "atomic"
          },
          "unhealthyPodEvictionPolicy": {
            "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods\nshould be considered for eviction. Current implementation considers healthy pods,\nas pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n\nValid policies are IfHealthyBudget and AlwaysAllow.\nIf no policy is specified, the default behavior will be used,\nwhich corresponds to the IfHealthyBudget policy.\n\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"),\nbut not yet healthy can be evicted only if the guarded application is not\ndisrupted (status.currentHealthy is at least equal to status.desiredHealthy).\nHealthy pods will be subject to the PDB for eviction.\n\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"),\nbut not yet healthy are considered disrupted and can be evicted regardless\nof whether the criteria in a PDB is met. This means perspective running\npods of a disrupted application might not get a chance to become healthy.\nHealthy pods will be subject to the PDB for eviction.\n\n\nAdditional policies may be added in the future.\nClients making eviction decisions should disallow eviction of unhealthy pods\nif they encounter an unrecognized policy in this field.\n\n\nThis field is beta-level. The eviction API uses this field when\nthe feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).",
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.metadata",
    "ObjectMeta is the metadata of the PDB.\nThe name and namespace provided here are managed by ECK and will be ignored.",
    "object",
    {
      "annotations": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "finalizers": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "labels": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "namespace": {
        "type": "string"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.metadata",
    "ObjectMeta is the metadata of the PDB.\nThe name and namespace provided here are managed by ECK and will be ignored.",
    "object",
    {
      "annotations": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "finalizers": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "labels": {
        "additionalProperties": {
          "type": "string"
        },
        "type": "object"
      },
      "name": {
        "type": "string"
      },
      "namespace": {
        "type": "string"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.annotations",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.annotations",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.annotations.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.annotations.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.finalizers",
    null,
    "array",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.finalizers",
    null,
    "array",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.finalizers.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.finalizers.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.labels",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.labels",
    null,
    "object",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.labels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.labels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.name",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.name",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.namespace",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.metadata.namespace",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec",
    "Spec is the specification of the PDB.",
    "object",
    {
      "maxUnavailable": {
        "anyOf": [
          {
            "type": "integer"
          },
          {
            "type": "string"
          }
        ],
        "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by\n\"selector\" are unavailable after the eviction, i.e. even in absence of\nthe evicted pod. For example, one can prevent all voluntary evictions\nby specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
        "x-kubernetes-int-or-string": true
      },
      "minAvailable": {
        "anyOf": [
          {
            "type": "integer"
          },
          {
            "type": "string"
          }
        ],
        "description": "An eviction is allowed if at least \"minAvailable\" pods selected by\n\"selector\" will still be available after the eviction, i.e. even in the\nabsence of the evicted pod.  So for example you can prevent all voluntary\nevictions by specifying \"100%\".",
        "x-kubernetes-int-or-string": true
      },
      "selector": {
        "description": "Label query over pods whose evictions are managed by the disruption\nbudget.\nA null selector selects no pods.\nAn empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.\nIn policy/v1, an empty selector will select all pods in the namespace.",
        "properties": {
          "matchExpressions": {
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
            "items": {
              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
              "properties": {
                "key": {
                  "description": "key is the label key that the selector applies to.",
                  "type": "string"
                },
                "operator": {
                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                  "type": "string"
                },
                "values": {
                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "atomic"
                }
              },
              "required": [
                "key",
                "operator"
              ],
              "type": "object"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "matchLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "unhealthyPodEvictionPolicy": {
        "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods\nshould be considered for eviction. Current implementation considers healthy pods,\nas pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n\nValid policies are IfHealthyBudget and AlwaysAllow.\nIf no policy is specified, the default behavior will be used,\nwhich corresponds to the IfHealthyBudget policy.\n\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"),\nbut not yet healthy can be evicted only if the guarded application is not\ndisrupted (status.currentHealthy is at least equal to status.desiredHealthy).\nHealthy pods will be subject to the PDB for eviction.\n\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"),\nbut not yet healthy are considered disrupted and can be evicted regardless\nof whether the criteria in a PDB is met. This means perspective running\npods of a disrupted application might not get a chance to become healthy.\nHealthy pods will be subject to the PDB for eviction.\n\n\nAdditional policies may be added in the future.\nClients making eviction decisions should disallow eviction of unhealthy pods\nif they encounter an unrecognized policy in this field.\n\n\nThis field is beta-level. The eviction API uses this field when\nthe feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).",
        "type": "string"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.spec",
    "Spec is the specification of the PDB.",
    "object",
    {
      "maxUnavailable": {
        "anyOf": [
          {
            "type": "integer"
          },
          {
            "type": "string"
          }
        ],
        "description": "An eviction is allowed if at most \"maxUnavailable\" pods selected by\n\"selector\" are unavailable after the eviction, i.e. even in absence of\nthe evicted pod. For example, one can prevent all voluntary evictions\nby specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
        "x-kubernetes-int-or-string": true
      },
      "minAvailable": {
        "anyOf": [
          {
            "type": "integer"
          },
          {
            "type": "string"
          }
        ],
        "description": "An eviction is allowed if at least \"minAvailable\" pods selected by\n\"selector\" will still be available after the eviction, i.e. even in the\nabsence of the evicted pod.  So for example you can prevent all voluntary\nevictions by specifying \"100%\".",
        "x-kubernetes-int-or-string": true
      },
      "selector": {
        "description": "Label query over pods whose evictions are managed by the disruption\nbudget.\nA null selector selects no pods.\nAn empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.\nIn policy/v1, an empty selector will select all pods in the namespace.",
        "properties": {
          "matchExpressions": {
            "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
            "items": {
              "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
              "properties": {
                "key": {
                  "description": "key is the label key that the selector applies to.",
                  "type": "string"
                },
                "operator": {
                  "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
                  "type": "string"
                },
                "values": {
                  "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array",
                  "x-kubernetes-list-type": "atomic"
                }
              },
              "required": [
                "key",
                "operator"
              ],
              "type": "object"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "matchLabels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
            "type": "object"
          }
        },
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "unhealthyPodEvictionPolicy": {
        "description": "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods\nshould be considered for eviction. Current implementation considers healthy pods,\nas pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n\nValid policies are IfHealthyBudget and AlwaysAllow.\nIf no policy is specified, the default behavior will be used,\nwhich corresponds to the IfHealthyBudget policy.\n\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"),\nbut not yet healthy can be evicted only if the guarded application is not\ndisrupted (status.currentHealthy is at least equal to status.desiredHealthy).\nHealthy pods will be subject to the PDB for eviction.\n\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"),\nbut not yet healthy are considered disrupted and can be evicted regardless\nof whether the criteria in a PDB is met. This means perspective running\npods of a disrupted application might not get a chance to become healthy.\nHealthy pods will be subject to the PDB for eviction.\n\n\nAdditional policies may be added in the future.\nClients making eviction decisions should disallow eviction of unhealthy pods\nif they encounter an unrecognized policy in this field.\n\n\nThis field is beta-level. The eviction API uses this field when\nthe feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).",
        "type": "string"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.spec.maxUnavailable",
    "An eviction is allowed if at most \"maxUnavailable\" pods selected by\n\"selector\" are unavailable after the eviction, i.e. even in absence of\nthe evicted pod. For example, one can prevent all voluntary evictions\nby specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
    "opaque",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.maxUnavailable",
    "An eviction is allowed if at most \"maxUnavailable\" pods selected by\n\"selector\" are unavailable after the eviction, i.e. even in absence of\nthe evicted pod. For example, one can prevent all voluntary evictions\nby specifying 0. This is a mutually exclusive setting with \"minAvailable\".",
    "opaque",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.minAvailable",
    "An eviction is allowed if at least \"minAvailable\" pods selected by\n\"selector\" will still be available after the eviction, i.e. even in the\nabsence of the evicted pod.  So for example you can prevent all voluntary\nevictions by specifying \"100%\".",
    "opaque",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.minAvailable",
    "An eviction is allowed if at least \"minAvailable\" pods selected by\n\"selector\" will still be available after the eviction, i.e. even in the\nabsence of the evicted pod.  So for example you can prevent all voluntary\nevictions by specifying \"100%\".",
    "opaque",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector",
    "Label query over pods whose evictions are managed by the disruption\nbudget.\nA null selector selects no pods.\nAn empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.\nIn policy/v1, an empty selector will select all pods in the namespace.",
    "object",
    {
      "matchExpressions": {
        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        "items": {
          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
          "properties": {
            "key": {
              "description": "key is the label key that the selector applies to.",
              "type": "string"
            },
            "operator": {
              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
              "type": "string"
            },
            "values": {
              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            }
          },
          "required": [
            "key",
            "operator"
          ],
          "type": "object"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      },
      "matchLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
        "type": "object"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector",
    "Label query over pods whose evictions are managed by the disruption\nbudget.\nA null selector selects no pods.\nAn empty selector ({}) also selects no pods, which differs from standard behavior of selecting all pods.\nIn policy/v1, an empty selector will select all pods in the namespace.",
    "object",
    {
      "matchExpressions": {
        "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
        "items": {
          "description": "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
          "properties": {
            "key": {
              "description": "key is the label key that the selector applies to.",
              "type": "string"
            },
            "operator": {
              "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
              "type": "string"
            },
            "values": {
              "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
              "items": {
                "type": "string"
              },
              "type": "array",
              "x-kubernetes-list-type": "atomic"
            }
          },
          "required": [
            "key",
            "operator"
          ],
          "type": "object"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      },
      "matchLabels": {
        "additionalProperties": {
          "type": "string"
        },
        "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
        "type": "object"
      }
    },
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions",
    "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    "array",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions",
    "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
    "array",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM",
    "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
    "object",
    {
      "key": {
        "description": "key is the label key that the selector applies to.",
        "type": "string"
      },
      "operator": {
        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
        "type": "string"
      },
      "values": {
        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      }
    },
    [
      "key",
      "operator"
    ]
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM",
    "A label selector requirement is a selector that contains values, a key, and an operator that\nrelates the key and values.",
    "object",
    {
      "key": {
        "description": "key is the label key that the selector applies to.",
        "type": "string"
      },
      "operator": {
        "description": "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
        "type": "string"
      },
      "values": {
        "description": "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
        "items": {
          "type": "string"
        },
        "type": "array",
        "x-kubernetes-list-type": "atomic"
      }
    },
    [
      "key",
      "operator"
    ]
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.key",
    "key is the label key that the selector applies to.",
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.key",
    "key is the label key that the selector applies to.",
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.operator",
    "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.operator",
    "operator represents a key's relationship to a set of values.\nValid operators are In, NotIn, Exists and DoesNotExist.",
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.values",
    "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
    "array",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.values",
    "values is an array of string values. If the operator is In or NotIn,\nthe values array must be non-empty. If the operator is Exists or DoesNotExist,\nthe values array must be empty. This array is replaced during a strategic\nmerge patch.",
    "array",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.values.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchExpressions.ITEM.values.ITEM",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchLabels",
    "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
    "object",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchLabels",
    "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels\nmap is equivalent to an element of matchExpressions, whose key field is \"key\", the\noperator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
    "object",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchLabels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.selector.matchLabels.additional_properties",
    null,
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.unhealthyPodEvictionPolicy",
    "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods\nshould be considered for eviction. Current implementation considers healthy pods,\nas pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n\nValid policies are IfHealthyBudget and AlwaysAllow.\nIf no policy is specified, the default behavior will be used,\nwhich corresponds to the IfHealthyBudget policy.\n\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"),\nbut not yet healthy can be evicted only if the guarded application is not\ndisrupted (status.currentHealthy is at least equal to status.desiredHealthy).\nHealthy pods will be subject to the PDB for eviction.\n\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"),\nbut not yet healthy are considered disrupted and can be evicted regardless\nof whether the criteria in a PDB is met. This means perspective running\npods of a disrupted application might not get a chance to become healthy.\nHealthy pods will be subject to the PDB for eviction.\n\n\nAdditional policies may be added in the future.\nClients making eviction decisions should disallow eviction of unhealthy pods\nif they encounter an unrecognized policy in this field.\n\n\nThis field is beta-level. The eviction API uses this field when\nthe feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).",
    "string",
    null,
    null
  ],
  [
    "spec.podDisruptionBudget.spec.unhealthyPodEvictionPolicy",
    "UnhealthyPodEvictionPolicy defines the criteria for when unhealthy pods\nshould be considered for eviction. Current implementation considers healthy pods,\nas pods that have status.conditions item with type=\"Ready\",status=\"True\".\n\n\nValid policies are IfHealthyBudget and AlwaysAllow.\nIf no policy is specified, the default behavior will be used,\nwhich corresponds to the IfHealthyBudget policy.\n\n\nIfHealthyBudget policy means that running pods (status.phase=\"Running\"),\nbut not yet healthy can be evicted only if the guarded application is not\ndisrupted (status.currentHealthy is at least equal to status.desiredHealthy).\nHealthy pods will be subject to the PDB for eviction.\n\n\nAlwaysAllow policy means that all running pods (status.phase=\"Running\"),\nbut not yet healthy are considered disrupted and can be evicted regardless\nof whether the criteria in a PDB is met. This means perspective running\npods of a disrupted application might not get a chance to become healthy.\nHealthy pods will be subject to the PDB for eviction.\n\n\nAdditional policies may be added in the future.\nClients making eviction decisions should disallow eviction of unhealthy pods\nif they encounter an unrecognized policy in this field.\n\n\nThis field is beta-level. The eviction API uses this field when\nthe feature gate PDBUnhealthyPodEvictionPolicy is enabled (enabled by default).",
    "string",
    null,
    null
  ]
]