import known_schemas

WHITEBOX = [
    known_schemas.K8sField(['spec', 'backup', 'pitr', 'resources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'backup', 'imagePullPolicy'], known_schemas.ImagePullPolicySchema),
    known_schemas.K8sField(['spec', 'backup', 'serviceAccountName'], known_schemas.ServiceAccountNameSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'affinity', 'advanced'], known_schemas.AffinitySchema),
    known_schemas.K8sField(['spec', 'haproxy', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'priorityClassName'], known_schemas.PriorityClassNameSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'replicasServiceType'], known_schemas.ServiceTypeSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'podSecurityContext'], known_schemas.PodSecurityContextSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'resources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'replicasServiceType'], known_schemas.ServiceTypeSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecarPVCs', 'ITEM', 'spec', 'resources'], known_schemas.StorageResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecarResources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecarVolumes', 'ITEM'], known_schemas.VolumeSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecars', 'ITEM'], known_schemas.ContainerSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'tolerations'], known_schemas.TolerationsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'size'], known_schemas.ReplicasSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'volumeSpec', 'persistentVolumeClaim', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'logcollector', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'logcollector', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'affinity', 'advanced'], known_schemas.AffinitySchema),
    known_schemas.K8sField(['spec', 'proxysql', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'priorityClassName'], known_schemas.PriorityClassNameSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'podSecurityContext'], known_schemas.PodSecurityContextSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'resources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecarPVCs', 'ITEM', 'spec', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecarResources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecarVolumes', 'ITEM'], known_schemas.VolumeSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecars', 'ITEM'], known_schemas.ContainerSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'tolerations'], known_schemas.TolerationsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'size'], known_schemas.ReplicasSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'volumeSpec', 'persistentVolumeClaim', 'resources'], known_schemas.StorageResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'affinity', 'advanced'], known_schemas.AffinitySchema),
    known_schemas.K8sField(['spec', 'pxc', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'pxc', 'imagePullPolicy'], known_schemas.ImagePullPolicySchema),
    known_schemas.K8sField(['spec', 'pxc', 'priorityClassName'], known_schemas.PriorityClassNameSchema),
    known_schemas.K8sField(['spec', 'pxc', 'podSecurityContext'], known_schemas.PodSecurityContextSchema),
    known_schemas.K8sField(['spec', 'pxc', 'resources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecarPVCs', 'ITEM', 'spec', 'resources'], known_schemas.StorageResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecarResources'], known_schemas.ComputeResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecarVolumes', 'ITEM'], known_schemas.VolumeSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecars', 'ITEM'], known_schemas.ContainerSchema),
    known_schemas.K8sField(['spec', 'pxc', 'tolerations'], known_schemas.TolerationsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'volumeSpec', 'persistentVolumeClaim', 'resources'], known_schemas.StorageResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'size'], known_schemas.ReplicasSchema),
]

BLACKBOX = [
    known_schemas.K8sField(['spec', 'backup', 'pitr', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'affinity', 'advanced'], known_schemas.AffinitySchema),
    known_schemas.K8sField(['spec', 'haproxy', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'podSecurityContext'], known_schemas.PodSecurityContextSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecarPVCs', 'ITEM', 'spec', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecarResources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecarVolumes', 'ITEM'], known_schemas.VolumeSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'sidecars', 'ITEM'], known_schemas.ContainerSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'tolerations'], known_schemas.TolerationsSchema),
    known_schemas.K8sField(['spec', 'haproxy', 'volumeSpec', 'persistentVolumeClaim', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'logcollector', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'logcollector', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'affinity', 'advanced'], known_schemas.AffinitySchema),
    known_schemas.K8sField(['spec', 'proxysql', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'podSecurityContext'], known_schemas.PodSecurityContextSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecarPVCs', 'ITEM', 'spec', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecarResources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecarVolumes', 'ITEM'], known_schemas.VolumeSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'sidecars', 'ITEM'], known_schemas.ContainerSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'tolerations'], known_schemas.TolerationsSchema),
    known_schemas.K8sField(['spec', 'proxysql', 'volumeSpec', 'persistentVolumeClaim', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'affinity', 'advanced'], known_schemas.AffinitySchema),
    known_schemas.K8sField(['spec', 'pxc', 'containerSecurityContext'], known_schemas.SecurityContextSchema),
    known_schemas.K8sField(['spec', 'pxc', 'podSecurityContext'], known_schemas.PodSecurityContextSchema),
    known_schemas.K8sField(['spec', 'pxc', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecarPVCs', 'ITEM', 'spec', 'resources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecarResources'], known_schemas.ResourceRequirementsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecarVolumes', 'ITEM'], known_schemas.VolumeSchema),
    known_schemas.K8sField(['spec', 'pxc', 'sidecars', 'ITEM'], known_schemas.ContainerSchema),
    known_schemas.K8sField(['spec', 'pxc', 'tolerations'], known_schemas.TolerationsSchema),
    known_schemas.K8sField(['spec', 'pxc', 'volumeSpec', 'persistentVolumeClaim', 'resources'], known_schemas.ResourceRequirementsSchema),
]